apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nanumsa-socket-server-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-production"
    cert-manager.io/acme-challenge-issuer: "letsencrypt-production"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-set-headers: '{"X-Forwarded-Proto": "ws"}'
    nginx.ingress.kubernetes.io/upgrade: "websocket"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/proxy-http-version: "1.0"
    nginx.ingress.kubernetes.io/cors-allow-methods: GET, POST, DELETE, PATCH, PUT, OPTIONS
    nginx.ingress.kubernetes.io/configuration-snippet: |
      location ^/socket/(.*) {
        proxy_pass wss://www.nanumsa.com:3000;

        proxy_set_header X-Real-IP $remote_addr;
        proxy_pass_header Content-Type;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      }
spec:
  ingressClassName: nginx
  tls: 
  - hosts: 
    - www.nanumsa.com
    secretName: tls-secret-socket-server
  rules:
  - host: www.nanumsa.com
    http:
      paths:
      - path: /socket/(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: nanumsa-socket-server
            port:
              number: 3000
